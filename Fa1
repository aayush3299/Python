{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q.(5) WAP to find validity of a string of parathesis<br>\n",
    "'(',')','{','}','[' and ']' <br>\n",
    "these brackets must be closed in the correct order.<br>\n",
    "Ex. \"()\" and \"()[]{}\" are valid<br>\n",
    "\"[)\",\"({[)]\" and \"{{{\" are invalid <br>\n",
    "Input: \"(){}[]\"<br>\n",
    "O/P: True<br>\n",
    "Input: \"()[{)}\"<br>\n",
    "O.p: False<br>\n",
    "Input: \"({[]])\"<br>\n",
    "O/P: False**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " [{]}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "usr_input=list(input())\n",
    "count=0\n",
    "key={'(':')','{':'}','[':']'}\n",
    "\"\"\"\n",
    "for i in range(len(usr_input)):\n",
    "    if usr_input[i] in key.keys():\n",
    "        for j in range(i+1,len(usr_input)):\n",
    "            c=key.get(usr_input[i])\n",
    "            if usr_input[j]==c:\n",
    "                count=count+1\n",
    "                usr_input[j]='@'\n",
    "                continue\n",
    "            else:\n",
    "                break\n",
    "    else:\n",
    "        break\n",
    "if(count==len(usr_input)//2):\n",
    "    print(True)\n",
    "else:\n",
    "    print(False)\"\"\"     \n",
    "for i,element in enumerate(usr_input):\n",
    "    if element in key.keys():\n",
    "        for j in range(i+1,len(usr_input)):\n",
    "            if usr_input[j]==key.get(element):\n",
    "                count+=1\n",
    "                usr_input[j]=\"@\"\n",
    "                break\n",
    "\n",
    "if(count==len(usr_input)/2):\n",
    "    print(True)\n",
    "else:\n",
    "    print(False)        \n",
    "            \n",
    "        \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q. There is a bunch of flowers available where each flower is tagged by a number. Ram randomly picks up the flowers ,that might contain duplicate tag numbers. Now he has to form a bouquet from the picked up flowers such that each bouquet contains unique tag numbers. Automate this process using lists.<br>\n",
    "I/P: <br>\n",
    "5<br>\n",
    "1<br>\n",
    "2<br>\n",
    "3<br>\n",
    "1<br>\n",
    "4<br>\n",
    "O/P:[1,2,3,4]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 6\n",
      " 1\n",
      " 1\n",
      " -3\n",
      " 3\n",
      " 33\n",
      " 33\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, -3, 3, 33]\n"
     ]
    }
   ],
   "source": [
    "n=int(input())\n",
    "l=[]\n",
    "ans=[]\n",
    "for i in range(n):\n",
    "    l.append(int(input()))\n",
    "for element in l:\n",
    "    if element not in ans:\n",
    "        ans.append(element)\n",
    "    else:\n",
    "        continue\n",
    "print(ans)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q. The students are given a task to test their intellect by counting all the prefixes from a given string such that the first alphabet has a greater frequency than the second alphabet.The input shopuld be a string and 2 alphabets.\n",
    "Taking the two aplhabets input compare them .The prefixes should be such that :the first aplhabet has greater frequency than the second alpha,such prefixes are to be displayed else\n",
    "    zero should be displayed.**\n",
    "I/P:\n",
    "python programming\n",
    "p\n",
    "m\n",
    "O/P:\n",
    "p\n",
    "py\n",
    "pyt\n",
    "pyth\n",
    "pytho\n",
    "python\n",
    "pythonp\n",
    "pythonpr\n",
    "pythonpro\n",
    "pythonprog\n",
    "pythonprogr\n",
    "pythonprogra\n",
    "pythonprogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " attitde\n",
      " t\n",
      " d\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n",
      "at\n",
      "att\n",
      "atti\n",
      "attit\n",
      "attitd\n",
      "attitde\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "usr_str=input()\n",
    "char1=input()\n",
    "char2=input()\n",
    "count=0\n",
    "for i in range(1,len(usr_str)+1):\n",
    "    j=usr_str[:i]\n",
    "    if (char1 not in j or char2 not in j)or (j.count(char1)>j.count(char2)):\n",
    "        print (j)\n",
    "        count=count+1\n",
    "    else:\n",
    "        break\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
